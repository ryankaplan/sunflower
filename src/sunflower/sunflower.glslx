precision highp float;
precision highp int;

uniform vec2 iResolution;
uniform vec2 iOffset;
uniform float iScale;
uniform sampler2D iInputTexture;

attribute vec2 quad;

const highp float PI = 3.141592653589793238462643383279502884197169399375105820974;
const highp float PHI = 0.618033988749894848204586834365638117720309179805762862135;
const highp float GAMMA = 3.883222077450933154693731259925391915269339787692096599014;

// Vertex shader for drawing a quad
////////////////////////////////////////////////////////////////////////

export void vCopyPosition() {
  gl_Position = vec4(quad, 0.0, 1.0);
}

// Pixel shader for Sunflower spiral
////////////////////////////////////////////////////////////////////////

const float DOT_RADIUS = 1.0;

vec2 polarToCartesian(float r, float theta) {
  return r * vec2(cos(theta), sin(theta));
}

export void fSunflowerSpiral() {
  vec4 pixelColor = vec4(0.0);

  vec2 pt = gl_FragCoord.xy;
  pt /= iScale;
  pt -= iOffset / iScale;

  float radius = length(pt);
  float margin = DOT_RADIUS / iScale;
  float lower = radius - margin;
  float upper = radius + margin;

  // We want to find all points, within margin of radius, that are
  // square roots of a whole number.
  float lowerSquare = floor(lower * lower);
  float upperSquare = ceil(upper * upper);
  for (int i = 0; i < 500; i++) {
    float square = lowerSquare + float(i);
    if (square > upperSquare) {
      break;
    }

    float root = sqrt(square);
    float desiredAngle = GAMMA * square;
    vec2 desiredPt = polarToCartesian(root, desiredAngle);
    if (length(desiredPt - pt) < margin) {
      pixelColor = vec4(1.0);
    }
  }

  gl_FragColor = pixelColor;
}

// Renders Sunflower data to screen
////////////////////////////////////////////////////////////////////////

const float SEARCH_SIZE = 10.0;

export void fRenderTexture() {
  for (float x = - SEARCH_SIZE; x < SEARCH_SIZE; x++) {
    for (float y = - SEARCH_SIZE; y < SEARCH_SIZE; y++) {

      vec2 uv = (gl_FragCoord.xy + vec2(x, y)) / iResolution;

      vec4 color = texture2D(iInputTexture, uv);
      if (length(color) > 0.001) {
        gl_FragColor = vec4(1.0);
        return;
      }
    }
  }

  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
}